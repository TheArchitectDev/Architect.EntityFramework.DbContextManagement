<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <AssemblyName>Architect.EntityFramework.DbContextManagement</AssemblyName>
    <RootNamespace>Architect.EntityFramework.DbContextManagement</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <!-- NoWarn: 1573=SummariesOnOnlySomeParams -->
    <!-- NoWarn: 1591=MissingXmlComments -->
    <NoWarn>1573;1591</NoWarn>
    <LangVersion>latest</LangVersion>
    <Nullable>Enable</Nullable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <VersionPrefix>1.0.0</VersionPrefix>
    <PackageReleaseNotes>
    </PackageReleaseNotes>
    <Description>
Manage your DbContexts the right way.

https://github.com/TheArchitectDev/Architect.EntityFramework.DbContextManagement

The data access layer or infrastructure layer uses the DbContext (e.g. from a repository). Controlling its scope and transaction lifetime, however, is ideally the reponsibility of the orchestrating layer (e.g. from an application service). This package adds that ability to Entity Framework Core 5.0.0 and up.

// Register
public void ConfigureServices(IServiceCollection services)
{
  services.AddPooledDbContextFactory&lt;MyDbContext&gt;(context =&gt;
    context.UseSqlServer(connectionString, sqlServer =&gt; sqlServer.EnableRetryOnFailure()));

  services.AddDbContextScope&lt;MyDbContext&gt;();
}

// Consume
public class MyRepository : IMyRepository
{
  // Accesses the DbContext instance currently provided by the orchestrating layer
  private MyDbContext DbContext =&gt; this.DbContextAccessor.CurrentDbContext;

  private IDbContextAccessor&lt;MyDbContext&gt; DbContextAccessor { get; }

  public OrderRepo(IDbContextAccessor&lt;MyDbContext&gt; dbContextAccessor)
  {
    this.DbContextAccessor = dbContextAccessor ?? throw new ArgumentNullException(nameof(dbContextAccessor));
  }

  public Task&lt;Order&gt; GetOrderById(long id)
  {
    return this.DbContext.Orders.SingleOrDefaultAsync(o.Id == id);
  }
}

// Orchestrate
public class MyApplicationService
{
  private IDbContextProvider&lt;MyDbContext&gt; DbContextProvider { get; }
  private IMyRepository MyRepository { get; }

  public MyApplicationService(IDbContextProvider&lt;MyDbContext&gt; dbContextProvider, IMyRepository myRepository)
  {
    this.DbContextProvider = dbContextProvider ?? throw new ArgumentNullException(nameof(dbContextProvider));      
    this.MyRepository = myRepository ?? throw new ArgumentNullException(nameof(myRepository));
  }

  public async Task PerformSomeUnitOfWork()
  {
    // Provide a DbContext and execute a block of code within its scope
    await this.DbContextProvider.ExecuteInDbContextScopeAsync(async executionScope =&gt;
    {
      // Until the end of this block, IDbContextAccessor can access the scoped DbContext
      // It can do so from any number of invocations deep (not shown here)
      await this.MyRepository.AddOrder(new Order());

      // If we have made modifications, we should save them
      // We could save here or as part of the repository methods, depending on our preference
      await executionScope.DbContext.SaveChangesAsync();
    }); // If no exceptions occurred and this scope was not nested in another, the transaction is committed asynchronously here
  }
}
    </Description>
    <Copyright>The Architect</Copyright>
    <Company>The Architect</Company>
    <Authors>TheArchitectDev, Timovzl</Authors>
    <RepositoryUrl>https://github.com/TheArchitectDev/Architect.AmbientContexts</RepositoryUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageTags>DbContext, DbContextScope, AmbientDbContext, EntityFramework, Entity, Framework, EF, Core, EfCore, AmbientContext, AmbientScope, ambient, context, scope, IoC, inversion, control, transaction, UnitOfWork, unit, work</PackageTags>
    <PackageReleaseNotes>
    </PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Architect.AmbientContexts" Version="1.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="5.0.0" />
  </ItemGroup>

</Project>
